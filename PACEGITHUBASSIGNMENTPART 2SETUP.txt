PACE/Github Assignment Part 2(initial plan)
written by: 
-Daniel Shelton
-
-
4/25/2021

Data Structures Needed:

struct BoardType {
                  static const int MAX_SIZE = 10;
                 int board[MAX_SIZE][MAX_SIZE];
                  int numCount;
                };


Functions Needed/PseudoCode:


	Function for guessing:
		-ask for row of guess 
		-ask for column of guess
			-hit
				-notify if guess hit
			-miss
				-notify if guess miss
	Function for display:
		-init board
		-print board with boats
		-print board without boats
		-print a point where the guess is
			-note a different character is either a hit or miss 
\\\\\\\

	Function for ships:
		-carrier - 5 hits
		-battleship - 4 hits
		-cruiser - 3 hits
		-submarine - 2 hits
		-destroyer 2 hits
	(setBoat)Function for Boat random boat placement
		-places individual boats onto the grid
		-randomly pick direct to place boat
	    -for horizontal
		-check to make sure boat placement isn't overlapping antoher boats location
		-place boat on the grid
		-create the boat object
	    -for veritcal
		-check to make sure boat placement isn't overlapping antoher boats location
		-place boat on the grid
		-create the boat object
	(getDirection)Function to randomly put the direction of the boats for placement:
		-if (d>4)
			return 'h'
		-else
			return 'v'
	(editGrid)Function that puts numbers tht correspond to the boat type on the grid;
		-if(dir=='h')
        		for(int i=0; i<BoatSize; i++)
            			grid[row][col]=BoatSize;
            			col++;
            			cout << endl;
    		-else if(dir=='v')
      			for(int i=0; i<BoatSize; i++)
	       			grid[row][col]=BoatSize;
            			row++;
            			cout << endl;
    		-else
        		cout << "Error!  No direction passed" << endl;
	(checkSpaces)Function to check  the grid to make sure none of the boats overlap
			int check=0;
   		if(d=='h')
	        	for(int i=c; i<c+s; i++)
        		check=grid[r][i];
                		if(check!=0)
               			    return 1;       
              	  return 0;
    		else
        		for(int i=r; i<r+s; i++)
        		check=grid[i][c];
                if(check!=0)
                    return 1;
		  return 0;
	(resetColomnAndRow)Functino to make random column/row based on boat size so we don't go over the edge of the grid
		-switch statements for each boat with if/elses
	
	(BoatInfo)Function that makes the boat objects
		-makes a horzontal/vertical verions of all 5 types of boats
	
	(PlayGame)Function to play the game
		-init all values to 0
		-a large switch statement that runs the program
			-Says if you have missed
			-says if you have already guessed there
			-when guess makes a hit checks with boat is hit
			-when all boats are hit games thanks you for playing then ends the games
	(setHit)Function to set if boat is hit or not
		-hits++

	(checkSunk)Function to check if sunk or not
		-if hits are greater or equal to boat size
			return yes
		-else
			return no
	(boatCoordinates)Function to get boat coordinates after the have been placed by the random placing functions for the guessing to compare against
		-
	(getBoat)Function to link bombed to find particular coordinating boat
		-
		
	




int main(){
	int grid[10][10];	
	initalize the grid
	
	setBoat(. etc		// set all boats on the grid
	.
	.
	.
	.
	.
	
	cout << "Hello .... etc
	-show rules
	
	
}